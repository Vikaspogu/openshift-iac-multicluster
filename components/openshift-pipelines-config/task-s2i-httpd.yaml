apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: s2i httpd
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: "s2i, httpd, workspace"
  name: s2i-httpd-1-16-0
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: s2i-httpd task clones a Git repository and builds and pushes a container image using S2I and a HTTPD builder image.
  params:
    - default: latest
      description: The tag of httpd imagestream for httpd version
      name: VERSION
      type: string
    - default: .
      description: The location of the path to run s2i from.
      name: PATH_CONTEXT
      type: string
    - default: "true"
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      name: TLSVERIFY
      type: string
    - description: Location of the repo where image has to be pushed
      name: IMAGE
      type: string
    - default: "registry.redhat.io/rhel8/buildah@sha256:5c7cd7c9a3d49e8905fc98693f6da605aeafae36bde5622dc78e12f31db3cd59"
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: "false"
      description: Skip pushing the built image
      name: SKIP_PUSH
      type: string
    - default: []
      description: Environment variables to set during _build-time_.
      name: ENV_VARS
      type: array
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
  steps:
    - args:
        - "$(params.ENV_VARS[*])"
      env:
        - name: HOME
          value: /tekton/home
      image: "registry.redhat.io/source-to-image/source-to-image-rhel8@sha256:6a6025914296a62fdf2092c3a40011bd9b966a6806b094d51eec5e1bd5026ef4"
      name: generate
      resources: {}
      script: |
        echo "Processing Build Environment Variables"
        echo "" > /env-vars/env-file
        for var in "$@"
        do
            echo "$var" >> /env-vars/env-file
        done

        s2i build $(params.PATH_CONTEXT) image-registry.openshift-image-registry.svc:5000/openshift/httpd:$(params.VERSION) \
        --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-vars/env-file
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
        - mountPath: /env-vars
          name: env-vars
      workingDir: $(workspaces.source.path)
    - image: $(params.BUILDER_IMAGE)
      name: build-and-push
      resources: {}
      script: |
        buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
           --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0
        [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
        buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)

        cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: env-vars
  workspaces:
    - mountPath: /workspace/source
      name: source
    - description: An optional workspace that allows providing a .docker/config.json file for Buildah to access the container registry. The file should be placed at the root of the Workspace with name config.json.
      name: dockerconfig
      optional: true
