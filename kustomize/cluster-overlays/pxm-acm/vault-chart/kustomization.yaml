---
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: vault
resources:
  - ../../../bases/vault-chart/

helmCharts:
  - name: vault
    releaseName: vault
    namespace: hashicorp
    repo: https://helm.releases.hashicorp.com
    version: 0.25.0
    valuesInline:
      global:
        openshift: true

      injector:
        image:
          repository: "registry.connect.redhat.com/hashicorp/vault-k8s"
          tag: "1.2.1-ubi"

        agentImage:
          repository: "registry.connect.redhat.com/hashicorp/vault"
          tag: "1.14.0-ubi"

      server:
        image:
          repository: "registry.connect.redhat.com/hashicorp/vault"
          tag: "1.14.0-ubi"
        route:
          enabled: true
          host: ""
          tls:
            termination: edge
        dataStorage:
          storageClass: nfs

        volumes:
          - name: plugins
            emptyDir: {}
          - name: vault-root-token
            secret:
              secretName: vault-init
              optional: true

        volumeMounts:
          - mountPath: /usr/local/libexec/vault
            name: plugins
            readOnly: false

        extraInitContainers:
          - name: utility-downloader
            image: registry.access.redhat.com/ubi8/ubi:8.5
            command:
              - /bin/bash
              - -c
              - |
                  cd /usr/local/libexec/vault
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x kubectl
                  curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                  chmod +x jq
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault

        extraContainers:
          # you should not do this in production
          - name: auto-initializer
            image: registry.connect.redhat.com/hashicorp/vault:"1.14.0-ubi"
            env:
              - name: VAULT_ADDR
                value: https://vault.vault.svc:8200
            command:
              - /bin/bash
              - -c
              - |
                  while true; do
                    sleep 5
                    if [[ $(vault status | grep "Initialized" | grep "false") ]]; then
                      export INIT_RESPONSE=$(vault operator init -format=json -key-shares=1 -key-threshold=1)
                      echo "$INIT_RESPONSE"
                      export UNSEAL_KEY=$(echo "$INIT_RESPONSE" | /usr/local/libexec/vault/jq -r .unseal_keys_b64[0])
                      export ROOT_TOKEN=$(echo "$INIT_RESPONSE" | /usr/local/libexec/vault/jq -r .root_token)
                      echo "$UNSEAL_KEY"
                      echo "$ROOT_TOKEN"
                      /usr/local/libexec/vault/kubectl delete secret vault-init -n vault
                      /usr/local/libexec/vault/kubectl create secret generic vault-init -n vault --from-literal=unseal_key=${UNSEAL_KEY} --from-literal=root_token=${ROOT_TOKEN}
                    else
                      sleep 5
                    fi
                  done
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault
          # you should not do this in production
          - name: auto-unsealer
            image: registry.connect.redhat.com/hashicorp/vault:1.12.0-ubi
            env:
              - name: VAULT_ADDR
                value: https://vault.vault.svc:8200
            command:
              - /bin/bash
              - -c
              - |
                  while true; do
                    sleep 5
                    if [[ $(vault status | grep "Initialized" | grep "true") ]]; then
                      if [[ $(vault status | grep "Sealed" | grep "true") ]]; then
                        if [[ -f /vault-root-token/unseal_key ]]; then
                          #vault operator unseal -reset $(cat /vault-root-token/unseal_key)
                          vault operator unseal $(cat /vault-root-token/unseal_key)
                        else
                          echo unseal key not initialized yet
                        fi
                      else
                        echo vault already unsealed
                      fi
                    else
                      echo Vault not initialized yet
                    fi
                  done
            volumeMounts:
              - name: vault-root-token
                mountPath: /vault-root-token

patches: []
