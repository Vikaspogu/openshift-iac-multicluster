global:
  auth:
    backend:
      enabled: true
      existingSecret: ""
      value: ""
  clusterRouterBase: apps.pxm-acm.v3s.us
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: "@vikaspogu/developer-hub-open-dora@1.0.3"
        integrity: "sha512-lsOCIdBootz87sZI6JlBfDMRHZnI5JBW4oyGtunr8uFSJB6MOMOWYePPkwyvJavFZnf0EvqDaRX+KG539b09cA=="
        pluginConfig:
          dynamicPlugins:
            frontend:
              vikaspogu.developer-hub-open-dora:
                dynamicRoutes:
                  - path: /open-dora
                    importName: OpenDoraPluginPage
                    menuItem:
                      text: "OpenDORA"
                      icon: ExtensionIcon
                mountPoints:
                  - mountPoint: entity.page.overview/cards
                    importName: OpenDoraPluginPage
                    config:
                      layout:
                        gridColumnEnd:
                          lg: "span 4"
                          md: "span 6"
                          xs: "span 12"
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-security-insights
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-utils-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-techdocs
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-tekton:
                mountPoints:
                  - config:
                      if:
                        allOf:
                          - isTektonCIAvailable
                      layout:
                        gridColumn: 1 / -1
                        gridRowStart: 1
                    importName: TektonCI
                    mountPoint: entity.page.ci/cards
      - disabled: false
        package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-quay
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-tech-radar
  host: ""
route:
  annotations: {}
  enabled: true
  host: "{{ .Values.global.host }}"
  path: /
  tls:
    caCertificate: ""
    certificate: ""
    destinationCACertificate: ""
    enabled: true
    insecureEdgeTerminationPolicy: Redirect
    key: ""
    termination: edge
  wildcardPolicy: None
upstream:
  backstage:
    appConfig:
      app:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
      backend:
        auth:
          keys:
            - secret: "${BACKEND_SECRET}"
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          credentials: true
          methods:
            - GET
            - POST
            - PUT
            - DELETE
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        csp:
          connect-src:
            - "'self'"
            - "http:"
            - "https:"
        database:
          connection:
            password: "${POSTGRESQL_ADMIN_PASSWORD}"
            user: postgres
        reading:
          allow:
            - host: "*.apps.pxm-acm.v3s.us"
    args:
      - "--config"
      - dynamic-plugins-root/app-config.dynamic-plugins.yaml
    command: []
    extraEnvVarsSecrets:
      - rhdh-secrets
    extraAppConfig:
      - configMapRef: app-config-rhdh
        filename: app-config-rhdh.yaml
    extraEnvVars:
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: '{{ include "janus-idp.backend-secret-name" $ }}'
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{- include "janus-idp.postgresql.secretName" . }}'
      - name: KUBE_TOKEN
        valueFrom:
          secretKeyRef:
            key: token
            name: developer-hub-sa
    extraVolumeMounts:
      - mountPath: /opt/app-root/src/dynamic-plugins-root
        name: dynamic-plugins-root
    extraVolumes:
      - ephemeral:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
        name: dynamic-plugins-root
      - configMap:
          defaultMode: 420
          name: dynamic-plugins
          optional: true
        name: dynamic-plugins
      - name: dynamic-plugins-npmrc
        secret:
          defaultMode: 420
          optional: true
          secretName: dynamic-plugins-npmrc
    image:
      pullSecrets:
        - rhdh-pull-secret
      registry: registry.redhat.io
      repository: rhdh/rhdh-hub-rhel9
      tag: 1.0-200

    # extraContainers:
    #   - name: oauth-proxy
    #     args:
    #       - -provider=openshift
    #       - -https-address=:8888
    #       - -http-address=
    #       - -email-domain=*
    #       - -upstream=http://localhost:7007
    #       - -tls-cert=/etc/tls/private/tls.crt
    #       - -tls-key=/etc/tls/private/tls.key
    #       - -cookie-secret="{{ default (randAlpha 32 | lower | b64enc) .Values.oauthProxy.cookieSecret }}"
    #       - -openshift-service-account={{ include "common.names.fullname" . }}
    #       - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    #       - -skip-auth-regex=^/metrics
    #       - -skip-provider-button
    #       - -request-logging=true
    #     image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.14
    #     imagePullPolicy: IfNotPresent
    #     ports:
    #       - name: oauth-proxy
    #         containerPort: 8888
    #         protocol: TCP
    #     volumeMounts:
    #       - mountPath: /etc/tls/private
    #         name: backstage-tls

    initContainers:
      - command:
          - ./install-dynamic-plugins.sh
          - /dynamic-plugins-root
        env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
        image: '{{ include "backstage.image" . }}'
        imagePullPolicy: Always
        name: install-dynamic-plugins
        volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
        workingDir: /opt/app-root/src
    installDir: /opt/app-root/src
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    podAnnotations:
      checksum/dynamic-plugins: >-
        {{- include "common.tplvalues.render" ( dict "value"
        .Values.global.dynamic "context" $) | sha256sum }}
      reloader.stakater.com/auto: "true"
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 2
  ingress:
    host: "{{ .Values.global.host }}"
  serviceAccount:
    create: true
    name: "developer-hub"
  nameOverride: developer-hub
  postgresql:
    auth:
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
    enabled: true
    image:
      registry: registry.redhat.io
      repository: rhel9/postgresql-15
      tag: latest
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    primary:
      containerSecurityContext:
        enabled: false
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: '{{- include "postgresql.v1.secretName" . }}'
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
        size: 1Gi
      podSecurityContext:
        enabled: false
